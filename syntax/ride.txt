(defn- approach-loop [lander section angle power]
  (let [ax (:ax section)
        bx (:bx section)]
    (loop [l-prev lander]
      (let (l (move angle power 1.0 l-prev))
        (cond (<= ax (:x l) bx)              [:out l-prev]
              (over-section? l section)      [:ko l-prev] 
              (control-match? angle power l) [:ok l]
              :else                          (recur l))))))

В неком гипотетическом ride это могло бы выглядеть так:

(let approach-loop
  (lambda (lander section angle power)
    (let ax (:ax section)
         bx (:bx section)
         loop (lambda (l-prev)
                (let l (move angle power 1.0 l-prev))
                (cond (<= ax (:x l) bx)         (tuple :out l-prev)
                      (over-section? l section  (tuple :ko l-prev)
                      :else                     (loop l))))
      (loop lander))))

Мысль тут такая, что для ride let - это некая внутренняя конструкция. Потому что
мы пытаемся параллельно назначать множества переменных. Надо думать, в общем

Ещё есть проблема define, let и lambda. Видимо, хотелось бы писать так:

  (let approach-loop
       (lambda section angle power
               (let ax (:ax section)
                    bx (:bx section)
                    loop (lambda l-prev
                                 (let l (move angle power 1.0 l-prev)
                                      (cond (<= ax (:x l) bx))) ))))

Ну, допустим, как вариант. В принципе, деконструкторы здесь уместны:

  (let approach-loop
       (lambda lander (Section :ax ax :bx bx) angle power
         (let loop (lambda l-prev))))

Но вопрос, на самом деле, несколько в ином. Области видимости. Как вариант с
модулями:

(defrecord Control [^long angle ^long power])

(def ^:private ^:const angle-max-delta 15.0)
(def ^:private ^:const power-max-delta 1.0)

(defn- control-to [current goal max-delta]
  (let [delta (- goal current)]
    (cond (= 0 delta) goal
          (< 0 delta) (if (< delta max-delta) goal (+ current max-delta))
          (< 0 delta) (if (< delta max-delta) goal (- current max-delta)))))

(defn- control-tune [^Control f ^Control t]
  (->Control (control-to (:angle f) (:angle t) angle-max-delta)
             (control-to (:power f) (:power t) power-max-delta)))

(define control (lambda (numeric t)
                        (let Control (tuple :angle t :power t)
     
                             control-to (lambda current goal max-delta
                                                (let delta (- goal current)
                                                     (cond (= 0 delta) goal
                                                           (< 0 delta) (if (< delta max-delta) goal (+ current max-delta))
                                                           (> 0 delta)) (if (< delta max-delta) goal (- current max-delta))))

                             angle-max-delta (the t 15)
                             power-max-delta (the t 1)

                             control-tune (lambda (Control :angle fa :power fp)
                                                  (Control :angle ta :power tp)
                                                  (Control (control-to fa ta angle-max-delta)
                                                           (control-to fa ta power-max-delta)))

                             (tuple :Control Control :control-tune control-tune))))


Эх. Не получится ли из этого всего ужас-ужас?

(let Control (lambda (Num t) (type tuple :angle t :power t))
     
     control-to (lambda current goal max-delta
                        (let delta (- goal current)
                             (cond (= 0 delta) goal
                                   (< 0 delta) (if (< delta max-delta) goal (+ current max-delta))
                                   (> 0 delta)) (if (< delta max-delta) goal (- current max-delta))))

     angle-max-delta (the t 15)
     power-max-delta (the t 1)

     control-tune (lambda t
                          ((Control t) :angle fa :power fp)
                          ((Control t) :angle ta :power tp)
                          ((Control t) (control-to fa ta angle-max-delta)
                                       (control-to fa ta power-max-delta)))

    (define control (lambda t (tuple :Control (Control t)
                                     :control-tune (control-tune t)))))

Надо как-то совершенствовать. Но, кажется, ужаса-ужаса может и не случится. А
может и случится. В общем, нужно разбираться.

λ
