;; Mon Feb  3 03:43:38 PM +05 2025

;; Попытка сделать красивую семантику (((ev expr) k) r) не
;; удалась. Потому что постоянно приходится «дотягиваться» до r через k,
;; и снова формировать нужную структуру аппликаций. Видимо, каррировать
;; в виде (((ev expr) r) k) тоже не особо осмысленно, потому что теперь
;; просто в других случаях придётся «дотягиваться» до k (продолжение)
;; через r (окружение).

;; Например, нужно взять окружение r, чтобы потом продолжить в нём вычисление в if-cont

(define (evaluate-if ec et ef)
  (λ (r) (((evaluate ec) r) (if-cont et ef r))))

(define (if-cont et ef r)
  (λ (v) ((evaluate (if (null? v) ef et)) r))) 

;; Ну, ладно. Это выглядит поэлегантнее. Другой вариант ((ev expr) r k)

(define (evaluate-if ec et ef)
  (λ (r k) ((evaluate ec) r (if-cont et ef r k))))

(define (if-cont et ef r k)
  (λ (v) ((evaluate (if (null? v) ef et)) r k)))

;; В этом варианте приходится протаскивать и r, и k.

;; Ладно, пусть будет (((ev x) r) k). Надо же ощутить все грани удовольствия
